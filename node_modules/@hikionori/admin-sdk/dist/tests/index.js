"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteTest = exports.updateTest = exports.createTest = exports.getTestById = exports.getAllTests = exports.ActionTestBuilder = exports.ChoiceTestBuilder = void 0;
const axios_1 = require("axios");
const config_1 = require("../config");
class ChoiceTestBuilder {
    setId(id) {
        this.id = id;
    }
    setTheme(theme) {
        this.theme = theme;
    }
    setTextOfQuestion(text_of_question) {
        this.text_of_question = text_of_question;
    }
    setAnswers(answers) {
        this.answers = answers;
    }
    setCorrectAnswer(correct_answer) {
        this.correct_answer = correct_answer;
    }
    setLevel(level) {
        this.level = level;
    }
    getId() {
        return this.id;
    }
    getTheme() {
        return this.theme;
    }
    getTextOfQuestion() {
        return this.text_of_question;
    }
    getAnswers() {
        return this.answers;
    }
    getCorrectAnswer() {
        return this.correct_answer;
    }
    getLevel() {
        return this.level;
    }
}
exports.ChoiceTestBuilder = ChoiceTestBuilder;
class ActionTestBuilder {
    setId(id) {
        this.id = id;
    }
    setTheme(theme) {
        this.theme = theme;
    }
    setExample(example) {
        this.example = example;
    }
    setActions(actions) {
        this.actions = actions;
    }
    setAnswer(answer) {
        this.answer = answer;
    }
    setLevel(level) {
        this.level = level;
    }
    getId() {
        return this.id;
    }
    getTheme() {
        return this.theme;
    }
    getExample() {
        return this.example;
    }
    getActions() {
        return this.actions;
    }
    getAnswer() {
        return this.answer;
    }
    getLevel() {
        return this.level;
    }
}
exports.ActionTestBuilder = ActionTestBuilder;
const getAllTests = () => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(`${config_1.baseUrl}/admin/get/tests/all`);
    return response.data;
});
exports.getAllTests = getAllTests;
const getTestById = (id) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(`${config_1.baseUrl}/admin/get/test?id=${id}`);
    return response.data;
});
exports.getTestById = getTestById;
const createTest = (test_type, test) => __awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default.post(`${config_1.baseUrl}/admin/${test_type}/create/test`, test);
});
exports.createTest = createTest;
const updateTest = (test_type, test, id) => __awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default.put(`${config_1.baseUrl}/admin/${test_type}/update/test?id=${id}`, test);
});
exports.updateTest = updateTest;
const deleteTest = (id) => __awaiter(void 0, void 0, void 0, function* () {
    return axios_1.default.delete(`${config_1.baseUrl}/admin/delete/test?id=${id}`);
});
exports.deleteTest = deleteTest;
