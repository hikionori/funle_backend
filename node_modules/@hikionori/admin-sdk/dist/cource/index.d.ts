export interface Course {
    id: string;
    title: string;
    description: string;
    levels: {
        [key: string]: Array<Level>;
    };
}
export declare class CourceBuilder implements Course {
    id: string;
    title: string;
    description: string;
    levels: {
        [key: string]: Level[];
    };
    setId(id: string): void;
    setTitle(title: string): void;
    setDescription(description: string): void;
    setLevels(levels: {
        [key: string]: Level[];
    }): void;
    getId(): string;
    getDesription(): string;
    getTitle(): string;
    getLevels(): {
        [key: string]: Level[];
    };
}
export interface Level {
    id: string;
    title: string;
    mini_image: Array<Uint8Array>;
    type_: Type;
    n_of_tests: number | "None";
}
export declare enum Type {
    Info = "info",
    Test = "test"
}
export declare class LevelBuilder implements Level {
    id: string;
    title: string;
    mini_image: Uint8Array[];
    type_: Type;
    n_of_tests: number | "None";
    setId(id: string | "None"): void;
    setTitle(title: string): void;
    setMiniImage(bytes: Uint8Array[]): void;
    setType(type: Type): void;
    setNOfTests(n_of_tests: number | "None"): void;
}
export declare const getAllCources: () => Promise<Course[]>;
export declare const getCourceById: (id: string) => Promise<Course>;
export declare const createCource: (cource: Course) => Promise<Course>;
export declare const updateCource: (id: string, cource: Course) => Promise<import("axios").AxiosResponse<any, any>>;
export declare const deleteCource: (id: string) => Promise<void>;
