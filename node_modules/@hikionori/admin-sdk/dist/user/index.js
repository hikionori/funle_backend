"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeInfoFromUserProgress = exports.addInfoToUserProgress = exports.removeTestFromUserProgress = exports.addTestToUserProgress = exports.removeCourceFromUserProgress = exports.addCourceToUserProgress = exports.updateUserProgress = exports.updateUser = exports.getUserById = exports.getAllUsers = exports.deleteUser = exports.UserBuilder = void 0;
const axios_1 = require("axios");
const config_1 = require("../config");
class UserBuilder {
    setId(id) {
        this.id = id;
    }
    setUsername(username) {
        this.username = username;
    }
    setEmail(email) {
        this.email = email;
    }
    setHashedPassword(hashed_password) {
        this.hashed_password = hashed_password;
    }
    setRole(role) {
        this.role = role;
    }
    setProgress(progress) {
        this.progress = progress;
    }
}
exports.UserBuilder = UserBuilder;
const deleteUser = (id) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.delete(`${config_1.baseUrl}/admin/del/user?id=${id}`);
});
exports.deleteUser = deleteUser;
const getAllUsers = () => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(`${config_1.baseUrl}/admin/get/users`);
    return response;
});
exports.getAllUsers = getAllUsers;
const getUserById = (id) => __awaiter(void 0, void 0, void 0, function* () {
    const response = yield axios_1.default.get(`${config_1.baseUrl}/admin/get/user?id=${id}`);
    return response;
});
exports.getUserById = getUserById;
const updateUser = (user, id) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/update/user?id=${id}`, user);
});
exports.updateUser = updateUser;
// User progress functions
const updateUserProgress = (progress, id) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/update/user/progress?id=${id}`, progress);
});
exports.updateUserProgress = updateUserProgress;
const addCourceToUserProgress = (data) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/add/cource/user`, data);
});
exports.addCourceToUserProgress = addCourceToUserProgress;
const removeCourceFromUserProgress = (data) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/remove/cource/user`, data);
});
exports.removeCourceFromUserProgress = removeCourceFromUserProgress;
const addTestToUserProgress = (data) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/add/test/user`, data);
});
exports.addTestToUserProgress = addTestToUserProgress;
const removeTestFromUserProgress = (data) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/remove/test/user`, data);
});
exports.removeTestFromUserProgress = removeTestFromUserProgress;
const addInfoToUserProgress = (data) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/add/info/user`, data);
});
exports.addInfoToUserProgress = addInfoToUserProgress;
const removeInfoFromUserProgress = (data) => __awaiter(void 0, void 0, void 0, function* () {
    axios_1.default.put(`${config_1.baseUrl}/admin/remove/info/user`, data);
});
exports.removeInfoFromUserProgress = removeInfoFromUserProgress;
