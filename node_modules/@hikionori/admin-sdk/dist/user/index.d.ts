export type UserRole = "User" | "Student" | "Teacher";
export interface UserProgress {
    cources: string[];
    tests: string[];
    infos: string[];
}
export interface User {
    id: string | "None";
    username: string;
    email: string;
    hashed_password: string;
    role: UserRole;
    progress: UserProgress;
}
export declare class UserBuilder implements User {
    id: string | "None";
    username: string;
    email: string;
    hashed_password: string;
    role: UserRole;
    progress: UserProgress;
    setId(id: string | "None"): void;
    setUsername(username: string): void;
    setEmail(email: string): void;
    setHashedPassword(hashed_password: string): void;
    setRole(role: UserRole): void;
    setProgress(progress: UserProgress): void;
}
export declare const deleteUser: (id: string) => Promise<void>;
export declare const getAllUsers: () => Promise<User[]>;
export declare const getUserById: (id: string) => Promise<User>;
export declare const updateUser: (user: User, id: string) => Promise<void>;
export declare const updateUserProgress: (progress: UserProgress, id: string) => Promise<void>;
export type JoiningData = {
    cource_id: string;
    user_id: string;
};
export type TestPassingData = {
    test_id: string;
    user_id: string;
};
export type InfoPassingData = {
    info_id: string;
    user_id: string;
};
export declare const addCourceToUserProgress: (data: JoiningData) => Promise<void>;
export declare const removeCourceFromUserProgress: (data: JoiningData) => Promise<void>;
export declare const addTestToUserProgress: (data: TestPassingData) => Promise<void>;
export declare const removeTestFromUserProgress: (data: TestPassingData) => Promise<void>;
export declare const addInfoToUserProgress: (data: InfoPassingData) => Promise<void>;
export declare const removeInfoFromUserProgress: (data: InfoPassingData) => Promise<void>;
